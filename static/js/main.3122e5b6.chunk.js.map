{"version":3,"sources":["constants/store.ts","pages/Home.tsx","pages/Login.tsx","constants/routes.tsx","components/PrivateRoute/PrivateRoute.tsx","pages/NoMatch.tsx","layout/Root.tsx","api/config.ts","reportWebVitals.ts","index.tsx"],"names":["useGlobalState","createGlobalState","user","undefined","Home","className","Button","variant","onClick","a","signOut","getAuth","email","ErrorLabel","message","Login","useForm","defaultValues","login","password","reValidateMode","handleSubmit","control","errors","formState","useState","loading","setLoading","navigate","useNavigate","onSubmit","signInWithEmailAndPassword","alert","useEffect","isNil","routes","HOME","path","console","log","Container","maxWidth","LinearProgress","style","borderRadius","border","padding","Grid","container","spacing","item","xs","name","rules","required","render","field","TextField","error","label","helperText","type","prefix","component","isPrivate","LOGIN","PrivateRoute","children","location","useLocation","CircularProgress","to","state","from","NoMatch","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Root","authentication","setUser","onAuthStateChanged","authUser","CssBaseline","map","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3122e5b6.chunk.js","sourcesContent":["import { User } from 'firebase/auth';\r\nimport { createGlobalState } from 'react-hooks-global-state';\r\n\r\ntype Store = {\r\n    user: User | null | undefined;\r\n};\r\n\r\nexport const { useGlobalState } = createGlobalState<Store>({\r\n    user: undefined,\r\n});\r\n","import { Button } from '@mui/material';\r\nimport { useGlobalState } from 'constants/store';\r\nimport { getAuth, signOut } from 'firebase/auth';\r\n\r\nexport default function Home() {\r\n    const [user] = useGlobalState('user');\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Button\r\n                variant=\"text\"\r\n                onClick={async () => {\r\n                    signOut(getAuth());\r\n                }}\r\n            >\r\n                signout\r\n            </Button>\r\n            {user?.email}\r\n        </div>\r\n    );\r\n}\r\n","import { Button, Container, Grid, LinearProgress, TextField } from '@mui/material';\r\nimport { useGlobalState } from 'constants/store';\r\nimport { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { useEffect, useState } from 'react';\r\nimport { isNil } from 'lodash';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { routes } from 'constants/routes';\r\nimport { Controller, SubmitHandler, useForm } from 'react-hook-form';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\n\r\ntype FormValues = {\r\n    login: string;\r\n    password: string;\r\n};\r\n\r\nfunction ErrorLabel({ message }: { message: string }) {\r\n    return (\r\n        <>\r\n            <ErrorIcon className=\"mr-2 w-4 h-4\" />\r\n            <span>{message}</span>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function Login() {\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        formState: { errors },\r\n    } = useForm<FormValues>({\r\n        defaultValues: { login: '', password: '' },\r\n        reValidateMode: 'onSubmit',\r\n    });\r\n    const [user] = useGlobalState('user');\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = async ({ login, password }) => {\r\n        setLoading(true);\r\n        try {\r\n            await signInWithEmailAndPassword(getAuth(), login, password);\r\n        } catch (e) {\r\n            alert((e as any) || '');\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isNil(user)) {\r\n            navigate(routes.HOME.path);\r\n        }\r\n    }, [user]);\r\n\r\n    console.log(errors, 'errors');\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"flex justify-center items-center h-screen\">\r\n            <div>\r\n                {loading && <LinearProgress />}\r\n\r\n                <div\r\n                    style={{\r\n                        borderRadius: '8px',\r\n                        border: '1px solid #dadce0',\r\n                        padding: '48px 40px 36px',\r\n                    }}\r\n                >\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Controller\r\n                                    name=\"login\"\r\n                                    control={control}\r\n                                    rules={{\r\n                                        required: 'Wpisz Adres e-mail lub telefon',\r\n                                    }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            className=\"w-full\"\r\n                                            {...field}\r\n                                            error={!!errors.login}\r\n                                            label=\"Adres e-mail lub telefon\"\r\n                                            variant=\"outlined\"\r\n                                            helperText={\r\n                                                errors.login?.message && (\r\n                                                    <ErrorLabel message={errors.login.message} />\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Controller\r\n                                    name=\"password\"\r\n                                    control={control}\r\n                                    rules={{\r\n                                        required: 'Hasło',\r\n                                    }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            type=\"password\"\r\n                                            className=\"w-full\"\r\n                                            {...field}\r\n                                            error={!!errors.password}\r\n                                            label=\"Wpisz hasło\"\r\n                                            variant=\"outlined\"\r\n                                            helperText={\r\n                                                errors.password?.message && (\r\n                                                    <ErrorLabel message={errors.password.message} />\r\n                                                )\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item container xs={12} className=\"justify-end\">\r\n                                <Button type=\"submit\" variant=\"contained\">\r\n                                    Dalej\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","import Home from 'pages/Home';\r\nimport Login from 'pages/Login';\r\n\r\nconst prefix = '/gmail-clone';\r\n\r\nexport const routes = {\r\n    HOME: {\r\n        path: `${prefix}/`,\r\n        component: <Home />,\r\n        name: 'Home',\r\n        isPrivate: true,\r\n    },\r\n    LOGIN: {\r\n        path: `${prefix}/login`,\r\n        component: <Login />,\r\n        name: 'Login',\r\n        isPrivate: false,\r\n    },\r\n} as const;\r\n","import { CircularProgress } from '@mui/material';\r\nimport { routes } from 'constants/routes';\r\nimport { useGlobalState } from 'constants/store';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nfunction PrivateRoute({ children }: { children: JSX.Element }) {\r\n    const location = useLocation();\r\n    const [user] = useGlobalState('user');\r\n\r\n    if (user === undefined) {\r\n        return <CircularProgress />;\r\n    }\r\n\r\n    if (user === null) {\r\n        return <Navigate to={routes.LOGIN.path} state={{ from: location }} />;\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import { Button } from '@mui/material';\r\nimport { routes } from 'constants/routes';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function NoMatch() {\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Button onClick={() => navigate(routes.HOME.path)}>Returen</Button>\r\n        </div>\r\n    );\r\n}\r\n","import { firebaseConfig } from 'api/config';\nimport { PrivateRoute } from 'components/PrivateRoute';\nimport { routes } from 'constants/routes';\nimport { useGlobalState } from 'constants/store';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { map } from 'lodash';\nimport NoMatch from 'pages/NoMatch';\nimport { useEffect } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport 'layout/style/root.css';\nimport { CssBaseline } from '@mui/material';\n\ninitializeApp(firebaseConfig);\n\nfunction Root() {\n    const authentication = getAuth();\n    const [, setUser] = useGlobalState('user');\n\n    useEffect(() => {\n        onAuthStateChanged(authentication, (authUser) => {\n            setUser(authUser);\n        });\n    }, [onAuthStateChanged, authentication]);\n\n    return (\n        <>\n            <CssBaseline />\n            <BrowserRouter>\n                <Routes>\n                    {map(routes, ({ path, component, isPrivate }) =>\n                        isPrivate ? (\n                            <Route\n                                key={path}\n                                path={path}\n                                element={<PrivateRoute>{component}</PrivateRoute>}\n                            />\n                        ) : (\n                            <Route key={path} path={path} element={component} />\n                        )\n                    )}\n\n                    <Route path=\"*\" element={<NoMatch />} />\n                </Routes>\n            </BrowserRouter>\n        </>\n    );\n}\n\nexport default Root;\n","export const firebaseConfig = {\r\n    apiKey: 'AIzaSyC7k5hkrfiKIWVfR_bjx4s3XEf4Iyf3ENM',\r\n    authDomain: 'test-p-64541.firebaseapp.com',\r\n    projectId: 'test-p-64541',\r\n    storageBucket: 'test-p-64541.appspot.com',\r\n    messagingSenderId: '463564250016',\r\n    appId: '1:463564250016:web:36040b511e5edf3e62a2c5',\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from 'layout/Root';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Root />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}